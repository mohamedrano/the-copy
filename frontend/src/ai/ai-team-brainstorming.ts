"use server";

/**
 * @fileOverview AI team agent for brainstorming ideas for screenwriters.
 *
 * - aiTeamBrainstorming - A function to initiate the brainstorming process with AI agents.
 * - AITeamBrainstormingInput - The input type for the aiTeamBrainstorming function.
 * - AITeamBrainstormingOutput - The return type for the aiTeamBrainstorming function.
 */

import { ai } from "@/ai/genkit";
import { z } from "genkit";

const AITeamBrainstormingInputSchema = z.object({
  scriptConcept: z
    .string()
    .describe("The initial concept or premise for the script."),
  numberOfAgents: z
    .number()
    .min(2)
    .max(5)
    .default(3)
    .describe("The number of AI agents to use for brainstorming (2-5)."),
  specificRequests: z
    .string()
    .optional()
    .describe(
      "Any specific requests or guidelines for the brainstorming session."
    ),
});
export type AITeamBrainstormingInput = z.infer<
  typeof AITeamBrainstormingInputSchema
>;

const AITeamBrainstormingOutputSchema = z.object({
  brainstormingSessionSummary: z
    .string()
    .describe(
      "A summary of the brainstorming session, including key ideas and perspectives."
    ),
  agentIdeas: z.array(
    z.object({
      agentName: z.string().describe("The name of the AI agent."),
      ideas: z.array(z.string()).describe("Ideas generated by the agent."),
    })
  ),
});
export type AITeamBrainstormingOutput = z.infer<
  typeof AITeamBrainstormingOutputSchema
>;

export async function aiTeamBrainstorming(
  input: AITeamBrainstormingInput
): Promise<AITeamBrainstormingOutput> {
  return aiTeamBrainstormingFlow(input);
}

const agentPrompt = ai.definePrompt({
  name: "agentPrompt",
  input: { schema: AITeamBrainstormingInputSchema },
  output: { schema: z.object({ ideas: z.array(z.string()) }) },
  prompt: `You are an AI agent participating in a brainstorming session for a screenplay.

  Your task is to generate creative and innovative ideas based on the provided script concept and any specific requests.

  Script Concept: {{{scriptConcept}}}
  Specific Requests: {{{specificRequests}}}

  Generate a list of ideas that could enhance the script, explore new directions, or address potential weaknesses. Be creative, unconventional, and think outside the box.

  Ideas (as a numbered list):
  `,
});

const aiTeamBrainstormingFlow = ai.defineFlow(
  {
    name: "aiTeamBrainstormingFlow",
    inputSchema: AITeamBrainstormingInputSchema,
    outputSchema: AITeamBrainstormingOutputSchema,
  },
  async (input) => {
    const { numberOfAgents, scriptConcept, specificRequests } = input;

    const agentTasks = Array.from({ length: numberOfAgents }, (_, i) => {
      const agentName = `Agent${i + 1}`;
      return {
        agentName,
        task: agentPrompt(input),
      };
    });

    const agentResults = await Promise.all(
      agentTasks.map(async (agentTask) => {
        const taskResult = await agentTask.task;
        return {
          agentName: agentTask.agentName,
          ideas: taskResult.output?.ideas || [],
        };
      })
    );

    const brainstormingSessionSummary = `Brainstorming session with ${numberOfAgents} agents for the script concept: ${scriptConcept}. Specific requests: ${specificRequests || "None"}.`;

    return {
      brainstormingSessionSummary,
      agentIdeas: agentResults,
    };
  }
);
